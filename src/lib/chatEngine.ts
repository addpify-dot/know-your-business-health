import { businessProblems, conversationFlows, quickSuggestions, BusinessProblem, ConversationFlow } from './chatKnowledgeBase';

export interface ChatMessage {
  role: 'user' | 'assistant';
  content: string;
  timestamp: number;
}

export interface ChatContext {
  industry?: string;
  businessFunction?: string;
  language: 'en' | 'hi';
  previousMessages: ChatMessage[];
  currentTopic?: string;
  assessmentData?: any;
}

export class RuleBasedChatEngine {
  private context: ChatContext;

  constructor(context: ChatContext) {
    this.context = context;
  }

  private normalizeText(text: string): string {
    return text.toLowerCase().trim();
  }

  private findMatchingProblems(input: string): BusinessProblem[] {
    const normalizedInput = this.normalizeText(input);
    
    return businessProblems.filter(problem => 
      problem.keywords.some(keyword => 
        normalizedInput.includes(this.normalizeText(keyword))
      )
    ).sort((a, b) => {
      // Prioritize by number of matching keywords
      const aMatches = a.keywords.filter(k => normalizedInput.includes(this.normalizeText(k))).length;
      const bMatches = b.keywords.filter(k => normalizedInput.includes(this.normalizeText(k))).length;
      return bMatches - aMatches;
    });
  }

  private findMatchingFlow(input: string): ConversationFlow | null {
    const normalizedInput = this.normalizeText(input);
    
    return conversationFlows.find(flow =>
      flow.trigger.some(trigger => 
        normalizedInput.includes(this.normalizeText(trigger))
      )
    ) || null;
  }

  private generateActionPlan(language: 'en' | 'hi'): string {
    const planSteps = language === 'hi' ? [
      'ЁЯОп рд╕рдкреНрддрд╛рд╣ 1-2: рд╡рд░реНрддрдорд╛рди рд╕реНрдерд┐рддрд┐ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг',
      'тАв рдЕрдкрдиреЗ рдЯреЙрдк 10 рдЧреНрд░рд╛рд╣рдХреЛрдВ рдХреА рд╕реВрдЪреА рдмрдирд╛рдПрдВ',
      'тАв рдкрд┐рдЫрд▓реЗ 3 рдорд╣реАрдиреЗ рдХреА рдмрд┐рдХреНрд░реА рдХрд╛ рдбреЗрдЯрд╛ рдЗрдХрдЯреНрдард╛ рдХрд░реЗрдВ',
      'тАв рдореБрдЦреНрдп рдкреНрд░рддрд┐рдпреЛрдЧрд┐рдпреЛрдВ рдХреА рдкрд╣рдЪрд╛рди рдХрд░реЗрдВ',
      '',
      'ЁЯУИ рд╕рдкреНрддрд╛рд╣ 3-4: рддрддреНрдХрд╛рд▓ рд╕реБрдзрд╛рд░',
      'тАв Google My Business рдкреНрд░реЛрдлрд╛рдЗрд▓ рдмрдирд╛рдПрдВ/рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВ',
      'тАв WhatsApp Business рд╕реЗрдЯрдЕрдк рдХрд░реЗрдВ',
      'тАв рдЧреНрд░рд╛рд╣рдХреЛрдВ рд╕реЗ рдлреАрдбрдмреИрдХ рд▓реЗрдирд╛ рд╢реБрд░реВ рдХрд░реЗрдВ',
      '',
      'ЁЯЪА рд╕рдкреНрддрд╛рд╣ 5-8: рд╡рд┐рдХрд╛рд╕ рд░рдгрдиреАрддрд┐',
      'тАв рд░реЗрдлрд░рд▓ рдкреНрд░реЛрдЧреНрд░рд╛рдо рд╢реБрд░реВ рдХрд░реЗрдВ',
      'тАв рд╕реЛрд╢рд▓ рдореАрдбрд┐рдпрд╛ рдкрд░ рдирд┐рдпрдорд┐рдд рдкреЛрд╕реНрдЯрд┐рдВрдЧ',
      'тАв рдирдП рдЙрддреНрдкрд╛рдж/рд╕реЗрд╡рд╛ рд▓реЙрдиреНрдЪ рдХреА рдпреЛрдЬрдирд╛',
      '',
      'ЁЯТ░ рд╕рдкреНрддрд╛рд╣ 9-12: рд╕реНрдХреЗрд▓рд┐рдВрдЧ',
      'тАв рд╕рдлрд▓ рд░рдгрдиреАрддрд┐рдпреЛрдВ рдХреЛ рджреЛрд╣рд░рд╛рдПрдВ',
      'тАв рдирдП рдмрд╛рдЬрд╛рд░ рдЦрдВрдбреЛрдВ рдХреЛ рд▓рдХреНрд╖рд┐рдд рдХрд░реЗрдВ',
      'тАв рдЯреАрдо рд╡рд┐рд╕реНрддрд╛рд░ рдХреА рдпреЛрдЬрдирд╛ рдмрдирд╛рдПрдВ'
    ] : [
      'ЁЯОп Week 1-2: Current Situation Analysis',
      'тАв List your top 10 customers',
      'тАв Gather sales data from last 3 months',
      'тАв Identify main competitors',
      '',
      'ЁЯУИ Week 3-4: Immediate Improvements',
      'тАв Create/update Google My Business profile',
      'тАв Setup WhatsApp Business',
      'тАв Start collecting customer feedback',
      '',
      'ЁЯЪА Week 5-8: Growth Strategy',
      'тАв Launch referral program',
      'тАв Regular social media posting',
      'тАв Plan new product/service launch',
      '',
      'ЁЯТ░ Week 9-12: Scaling',
      'тАв Repeat successful strategies',
      'тАв Target new market segments',
      'тАв Plan team expansion'
    ];

    return planSteps.join('\n');
  }

  private getContextualResponse(language: 'en' | 'hi'): string {
    if (!this.context.assessmentData) {
      return language === 'hi' 
        ? 'рдореИрдВ рдЖрдкрдХреЗ рд╡реНрдпрд╡рд╕рд╛рдп рдХреЛ рдмреЗрд╣рддрд░ рдмрдирд╛рдиреЗ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВред рдХреГрдкрдпрд╛ рдмрддрд╛рдПрдВ рдХрд┐ рдЖрдкрдХреА рдореБрдЦреНрдп рдЪреБрдиреМрддреА рдХреНрдпрд╛ рд╣реИ?'
        : 'I can help improve your business. Please tell me what your main challenge is?';
    }

    const { industry, businessFunction, scores } = this.context.assessmentData;
    
    if (language === 'hi') {
      return `рдЖрдкрдХреЗ ${industry} рд╡реНрдпрд╡рд╕рд╛рдп рдХреЗ ${businessFunction} function рдореЗрдВ рд╕реБрдзрд╛рд░ рдХреЗ рд▓рд┐рдП рдореИрдВ рдпрд╣рд╛рдБ рд╣реВрдБред рдЖрдкрдХреА рд╡рд░реНрддрдорд╛рди рд╕реНрдХреЛрд░ рдХреЗ рдЕрдиреБрд╕рд╛рд░, рдореИрдВ рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рд╕реБрдЭрд╛рд╡ рджреЗ рд╕рдХрддрд╛ рд╣реВрдВред рдЖрдк рдХрд┐рд╕ рд╡рд┐рд╢рд┐рд╖реНрдЯ рдХреНрд╖реЗрддреНрд░ рдореЗрдВ рдорджрдж рдЪрд╛рд╣рддреЗ рд╣реИрдВ?`;
    } else {
      return `I'm here to help improve your ${industry} business, specifically in ${businessFunction}. Based on your current scores, I can provide practical suggestions. Which specific area would you like help with?`;
    }
  }

  public generateResponse(userInput: string): string {
    const language = this.context.language;
    
    // Check for greeting
    if (/^(hi|hello|рд╣реИрд▓реЛ|рдирдорд╕реНрддреЗ|hey)$/i.test(userInput.trim())) {
      return this.getContextualResponse(language);
    }

    // Check for action plan request
    if (this.normalizeText(userInput).includes('action plan') || this.normalizeText(userInput).includes('рдПрдХреНрд╢рди рдкреНрд▓рд╛рди')) {
      const intro = language === 'hi' 
        ? 'ЁЯУЛ рдЖрдкрдХреЗ рд▓рд┐рдП 30-рджрд┐рди рдХреА рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдПрдХреНрд╢рди рдкреНрд▓рд╛рди:\n\n'
        : 'ЁЯУЛ Here\'s your 30-day business action plan:\n\n';
      return intro + this.generateActionPlan(language);
    }

    // Find matching problems
    const matchingProblems = this.findMatchingProblems(userInput);
    
    if (matchingProblems.length > 0) {
      const problem = matchingProblems[0];
      const response = [
        `ЁЯТб ${problem.solution[language]}\n`,
        `ЁЯУЭ ${language === 'hi' ? 'рддрддреНрдХрд╛рд▓ рдХрд╛рд░реНрдп рдпреЛрдЬрдирд╛:' : 'Immediate Action Plan:'}\n`,
        ...problem.actionSteps[language].map((step, index) => `${index + 1}. ${step}`)
      ].join('\n');
      
      // Add contextual suggestions
      const suggestions = language === 'hi' 
        ? '\n\nЁЯдФ рдФрд░ рдорджрдж рдЪрд╛рд╣рд┐рдП? рдкреВрдЫреЗрдВ:\nтАв "рдХреИрд╢ рдлреНрд▓реЛ рдХреИрд╕реЗ рдмреЗрд╣рддрд░ рдХрд░реЗрдВ?"\nтАв "рдорд╛рд░реНрдХреЗрдЯрд┐рдВрдЧ рдмрдЬрдЯ рдХрдо рдХреИрд╕реЗ рдХрд░реЗрдВ?"\nтАв "рдЧреНрд░рд╛рд╣рдХ рдХреИрд╕реЗ рдмрдирд╛рдП рд░рдЦреЗрдВ?"'
        : '\n\nЁЯдФ Need more help? Ask:\nтАв "How to improve cash flow?"\nтАв "How to reduce marketing budget?"\nтАв "How to retain customers?"';
      
      return response + suggestions;
    }

    // Check for conversation flows
    const flow = this.findMatchingFlow(userInput);
    if (flow) {
      const questions = flow.questions[language];
      const randomQuestion = questions[Math.floor(Math.random() * questions.length)];
      return `ЁЯдФ ${randomQuestion}`;
    }

    // Default helpful response
    const defaultResponses = {
      hi: [
        'ЁЯдФ рдореИрдВ рд╕рдордЭ рдЧрдпрд╛ рдХрд┐ рдЖрдк рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рд╕рд╣рд╛рдпрддрд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВред рдХреГрдкрдпрд╛ рдЕрдзрд┐рдХ рд╡рд┐рд╢рд┐рд╖реНрдЯ рдмрддрд╛рдПрдВ:',
        'тАв рдмрд┐рдХреНрд░реА рдФрд░ рдЖрдорджрдиреА рдХреА рд╕рдорд╕реНрдпрд╛',
        'тАв рдорд╛рд░реНрдХреЗрдЯрд┐рдВрдЧ рдФрд░ рдкреНрд░рдЪрд╛рд░',
        'тАв рдХреИрд╢ рдлреНрд▓реЛ рдкреНрд░рдмрдВрдзрди',
        'тАв рдЯреАрдо рдореИрдиреЗрдЬрдореЗрдВрдЯ',
        'тАв рдкреНрд░рддрд┐рд╕реНрдкрд░реНрдзрд╛ рд╕реЗ рдирд┐рдкрдЯрдирд╛',
        '',
        'рдпрд╛ рдлрд┐рд░ "30 рджрд┐рдиреЛрдВ рдХреА рдПрдХреНрд╢рди рдкреНрд▓рд╛рди рдмрдирд╛рдПрдВ" рд▓рд┐рдЦреЗрдВред'
      ],
      en: [
        'ЁЯдФ I understand you need business help. Please be more specific about:',
        'тАв Sales and revenue issues',
        'тАв Marketing and promotion',
        'тАв Cash flow management',
        'тАв Team management',
        'тАв Dealing with competition',
        '',
        'Or simply type "Create a 30-day action plan".'
      ]
    };

    return defaultResponses[language].join('\n');
  }

  public getQuickSuggestions(): string[] {
    return quickSuggestions[this.context.language];
  }

  public updateContext(newContext: Partial<ChatContext>): void {
    this.context = { ...this.context, ...newContext };
  }
}